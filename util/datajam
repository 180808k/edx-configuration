#!/usr/bin/env python

import os
import sys
import subprocess
import argparse


class DatajamExecutor(object):

    def main(self):
        self.parser = argparse.ArgumentParser()
        self.parser.add_argument('--root', action='store', default='.', help='Root directory for your virtual environment.  Defaults to "."')

        self.subparsers = self.parser.add_subparsers()

        self.add_action('create', self.create, 'Create a datajam virtual environment.')
        self.add_action('ssh', self.ssh, 'Login to the datajam virtual environment')
        self.add_action('halt', self.halt, 'Shutdown an existing datajam virtual environment')
        self.add_action('start', self.start, 'Start up an existing datajam virtual environment')
        self.add_action('destroy', self.destroy, 'Remove a datajam virtual environment.  This will remove everything, use with care!')

        args = self.parser.parse_args()

        self.root = os.path.abspath(args.root)

        if not os.path.exists(self.root):
            sys.stderr.write('Root directory "{}" does not exist, please create it before running this script.\n'.format(self.root))
            sys.exit(1)

        self.configuration_root = os.path.join(self.root, 'configuration')
        self.datajam_root = os.path.join(self.configuration_root, 'vagrant', 'release', 'datajam')

        self.environment = os.environ.copy()
        self.environment['VAGRANT_MOUNT_BASE'] = self.root

        if os.path.exists(self.datajam_root):
            os.chdir(self.datajam_root)

        args.action()
        print 'OK'

    def add_action(self, action_name, func, help=None):
        parser = self.subparsers.add_parser(action_name, help=help)
        parser.set_defaults(action=func)

    def execute(self, command):
        return subprocess.check_call(['/bin/bash', '-c', 'source /etc/bash_completion.d/virtualenvwrapper && ' + command], env=self.environment)

    def create(self):
        os.chdir(self.root)
        if not os.path.exists(self.configuration_root):
            self.execute('git clone git@github.com:edx/configuration.git')

        os.chdir(self.configuration_root)
        self.execute('git fetch --all')
        self.execute('git checkout datajam')
        self.execute('git merge --ff-only origin/datajam')

        try:
            self.execute('workon edx-configuration')
        except subprocess.CalledProcessError:
            self.execute('mkvirtualenv edx-configuration')

        self.execute('workon edx-configuration && pip install -r requirements.txt')
        os.chdir(self.datajam_root)
        self.execute('workon edx-configuration && vagrant up')


    def destroy(self):
        self.execute('vagrant destroy')
        os.chdir('/')
        self.execute('rm -rf {}/*'.format(self.root))
        self.execute('rmvirtualenv edx-configuration')

    def ssh(self):
        self.execute('vagrant ssh')

    def halt(self):
        self.execute('vagrant halt')

    def start(self):
        self.execute('vagrant up --no-provision')


if __name__ == '__main__':
    DatajamExecutor().main()
