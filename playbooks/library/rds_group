#!/usr/bin/python
# -*- coding: utf-8 -*-


DOCUMENTATION = '''
---
module: rds_group
short_description: maintain an RDS security group.
description:
    - maintains RDS security groups. This module has a dependency on python-boto >= 2.5
options:
  name:
    description:
      - Name of the security group.
    required: true
  description:
    description:
      - Description of the security group.
    required: true
  rules:
    description:
      - List of firewall rules to enforce in this group (see example).
    required: true
  region:
    description:
      - the EC2 region to use
    required: false
    default: null
    aliases: []
  ec2_url:
    description:
      - Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints)
    required: false
    default: null
    aliases: []
  ec2_secret_key:
    description:
      - EC2 secret key
    required: false
    default: null
    aliases: []
  ec2_access_key:
    description:
      - EC2 access key
    required: false
    default: null
    aliases: []
requirements: [ "boto" ]
'''

EXAMPLES = '''
- name: example RDS group
  local_action:
    module: rds_group
    name: example
    description: an example EC2 group
    region: eu-west-1a
    ec2_secret_key: SECRET
    ec2_access_key: ACCESS
    rules:
      - cidr_ip: 0.0.0.0/0
      - group_id: abcdef
'''

try:
    import boto.rds
    import boto.ec2
except ImportError:
    print "failed=True msg='boto required for this module'"
    sys.exit(1)

def main():
    module = AnsibleModule(
        argument_spec=dict(
            name=dict(required=True),
            description=dict(required=True),
            rules=dict(),
            ec2_url=dict(aliases=['EC2_URL']),
            ec2_secret_key=dict(aliases=['EC2_SECRET_KEY'], no_log=True),
            ec2_access_key=dict(aliases=['EC2_ACCESS_KEY']),
            region=dict(choices=['eu-west-1', 'sa-east-1', 'us-east-1', 'ap-northeast-1', 'us-west-2', 'us-west-1', 'ap-southeast-1', 'ap-southeast-2']),
        ),
        supports_check_mode=True,
    )
    name = module.params['name']
    description = module.params['description']
    rules = module.params['rules']
    ec2_url = module.params.get('ec2_url')
    ec2_secret_key = module.params.get('ec2_secret_key')
    ec2_access_key = module.params.get('ec2_access_key')
    region = module.params.get('region')

    changed = False

    # allow eucarc environment variables to be used if ansible vars aren't set
    if not ec2_url and 'EC2_URL' in os.environ:
        ec2_url = os.environ['EC2_URL']
    if not ec2_secret_key and 'EC2_SECRET_KEY' in os.environ:
        ec2_secret_key = os.environ['EC2_SECRET_KEY']
    if not ec2_access_key and 'EC2_ACCESS_KEY' in os.environ:
        ec2_access_key = os.environ['EC2_ACCESS_KEY']

    try:
        rds = boto.rds.connect_to_region(region, aws_access_key_id=ec2_access_key, aws_secret_access_key=ec2_secret_key)
        ec2 = boto.ec2.connect_to_region(region, aws_access_key_id=ec2_access_key, aws_secret_access_key=ec2_secret_key)
    except boto.exception.NoAuthHandlerFound, e:
        module.fail_json(msg=str(e))

    # find the group if present
    group = None
    for cur_group in rds.get_all_dbsecurity_groups():
        if cur_group.name == name.lower():
            group = cur_group

    # if the group doesn't exist, create it now
    if not group:
        if not module.check_mode:
            group = rds.create_dbsecurity_group(name, description)
        changed = True

    all_ec2_groups = {}
    all_ec2_groups_by_name = {}
    for ec2_group in ec2.get_all_security_groups():
        all_ec2_groups[ec2_group.id] = ec2_group
        all_ec2_groups_by_name[ec2_group.name.lower()] = ec2_group

    # create a lookup for all existing rules on the group
    ec2_group_ids = []
    cidr_ips = []
    if group:
        ec2_group_ids = [all_ec2_groups_by_name[g.name].id for g in group.ec2_groups]
        cidr_ips = [r.cidr_ip for r in group.ip_ranges]

    # Now, go through all the defined rules and ensure they are there.
    if rules:
        for rule in rules:
            group_id = None
            ip = None
            if 'group_id' in rule and 'cidr_ip' in rule:
                module.fail_json(msg="Specify group_id OR cidr_ip, not both")
            elif 'group_id' in rule:
                group_id = rule['group_id']
            elif 'cidr_ip' in rule:
                ip = rule['cidr_ip']

            if group_id:
                if group_id in ec2_group_ids:
                    ec2_group_ids.remove(group_id)
                    continue
                elif not module.check_mode:
                    group.authorize(ec2_group=all_ec2_groups[group_id])
                    changed = True
            else:
                if ip in cidr_ips:
                    cidr_ips.remove(ip)
                    continue
                elif not module.check_mode:
                    group.authorize(cidr_ip=ip)
                    changed = True

    for group_id in ec2_group_ids:
        if not module.check_mode:
            group.revoke(ec2_group=all_ec2_groups[group_id])
        changed = True

    for ip in cidr_ips:
        if not module.check_mode:
            group.revoke(cidr_ip=ip)
        changed = True

    if not group:
        module.exit_json(changed=changed, group_name=None)
    module.exit_json(changed=changed, group_name=group.name)

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
