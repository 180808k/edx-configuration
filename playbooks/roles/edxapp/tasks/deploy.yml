# Stop all services.
- name: stop edxapp services
  service: name=edxapp state=stopped
  when: celery_worker is not defined
  tags:
  - lms
  - lms-preview
  - cms
  - deploy

- name: stop edx workers
  service: name=edx-workers state=stopped
  when: celery_worker is defined
  tags:
  - deploy

# update json configs for the application

- include: lms.yml
  when: "'lms' in service_variants_enabled"
- include: cms.yml
  when: "'cms' in service_variants_enabled"
- include: lms-preview.yml
  when: "'lms-preview' in service_variants_enabled"


# Do A Checkout
- name: edxapp | checkout edx-platform repo into {{edxapp_code_dir}}
  git: dest={{edxapp_code_dir}} repo={{edx_platform_repo}} version={{edx_platform_commit}}
  register: edx_platform_checkout
  sudo_user: "{{ edxapp_user }}"
  tags:
  - deploy

- name: git clean after checking out edx-platform
  shell: cd {{edxapp_code_dir}} && git clean -xdf
  when: edx_platform_checkout.changed
  sudo_user: "{{ edxapp_user }}"
  tags:
  - deploy


- name: checkout theme
  git: dest={{app_dir}}/themes/{{edxapp_theme_name}} repo={{edxapp_theme_source_repo}} version={{edxapp_theme_version}}
  when: edxapp_theme_name != ''
  sudo_user: "{{ edxapp_user }}"
  tags:
  - deploy

# Ruby plays that need to be run after platform updates.
- name: edxapp | gem install bundler
  shell: >
    gem install bundle
      chdir={{ edxapp_code_dir }}
      executable=/bin/bash
  environment: "{{ edxapp_deploy_environment }}"
  sudo_user: "{{ edxapp_user }}"
  tags:
  - deploy

- name: edxapp | bundle install
  shell: >
    bundle install --binstubs
      chdir={{ edxapp_code_dir }}
      executable=/bin/bash
  sudo_user: "{{ edxapp_user }}"
  environment: "{{ edxapp_deploy_environment }}"
  tags:
  - deploy

# Node play that need to be run after platform updates.
- name: Install edx-platform npm dependencies
  shell: npm install chdir={{ edxapp_code_dir }}
  sudo_user: "{{ edxapp_user }}"
  tags:
  - deploy

# Python plays that need to be run after platform updates.

# Substitute github mirror in all requirements files
#
- name: Updating requirement files for git mirror
  command: |
    /bin/sed -i -e 's/github\.com/{{ GIT_MIRROR }}/g' {{ item }}
  with_items:
    - "{{ pre_requirements_file }}"
    - "{{ post_requirements_file }}"
    - "{{ repo_requirements_file }}"
    - "{{ github_requirements_file }}"
    - "{{ local_requirements_file }}"
    - "{{ sandbox_base_requirements }}"
    - "{{ sandbox_local_requirements }}"
    - "{{ sandbox_post_requirements }}"
  sudo_user: "{{ edxapp_user }}"
  tags:
    - deploy

# Install the python pre requirements into {{ edxapp_venv_dir }}
- name : install python pre-requirements
  pip: >
    requirements="{{pre_requirements_file}}"
    virtualenv="{{edxapp_venv_dir}}"
    state=present
    extra_args="-i {{ PYPI_MIRROR_URL }}"
  sudo_user: "{{ edxapp_user }}"
  tags:
  - deploy

# Install the python modules into {{ edxapp_venv_dir }}
- name : install python base-requirements
  # Need to use shell rather than pip so that we can maintain the context of our current working directory; some
  # requirements are pathed relative to the edx-platform repo. Using the pip from inside the virtual environment implicitly
  # installs everything into that virtual environment.
  shell: cd {{ edxapp_code_dir }} && {{ edxapp_venv_dir }}/bin/pip install -i {{ PYPI_MIRROR_URL }} --exists-action w --use-mirrors -r {{ base_requirements_file }}
  sudo_user: "{{ edxapp_user }}"
  tags:
  - deploy

# Install the python post requirements into {{ edxapp_venv_dir }}
- name : install python post-requirements
  pip: >
    requirements="{{post_requirements_file}}"
    virtualenv="{{edxapp_venv_dir}}"
    state=present
    extra_args="-i {{ PYPI_MIRROR_URL }}"
  sudo_user: "{{ edxapp_user }}"
  tags:
  - deploy

# Install the final python modules into {{ edxapp_venv_dir }}
- name : install python post-post requirements
  # Need to use shell rather than pip so that we can maintain the context of our current working directory; some
  # requirements are pathed relative to the edx-platform repo. Using the pip from inside the virtual environment implicitly
  # installs everything into that virtual environment.
  shell: cd {{ edxapp_code_dir }} && {{ edxapp_venv_dir }}/bin/pip install -i {{ PYPI_MIRROR_URL }} --exists-action w --use-mirrors -r {{ item }}
  with_items:
  - "{{ repo_requirements_file }}"
  - "{{ github_requirements_file }}"
  - "{{ local_requirements_file }}"
  sudo_user: "{{ edxapp_user }}"
  tags:
  - deploy


# Install the sandbox python modules into {{ edxapp_venv_dir }}
- name : install sandbox requirements into regular venv
  # Need to use shell rather than pip so that we can maintain the context of our current working directory; some
  # requirements are pathed relative to the edx-platform repo. Using the pip from inside the virtual environment implicitly
  # installs everything into that virtual environment.
  shell: cd {{ edxapp_code_dir }} && {{ edxapp_venv_dir }}/bin/pip install -i {{ PYPI_MIRROR_URL }} --exists-action w --use-mirrors -r {{ item }}
  with_items:
  - "{{ sandbox_base_requirements }}"
  - "{{ sandbox_local_requirements }}"
  - "{{ sandbox_post_requirements }}"
  when: install_sandbox_reqs_into_regular_venv
  sudo_user: "{{ edxapp_user }}"
  tags:
  - deploy

- name: syncdb and migrate
  shell: sudo -u {{ edxapp_user }} SERVICE_VARIANT=lms {{ edxapp_venv_bin}}/django-admin.py syncdb --migrate --noinput --settings=lms.envs.aws --pythonpath={{ edxapp_code_dir }}
  when: migrate_db is defined and migrate_db|lower == "yes"
  tags:
  - deploy

- name: db migrate
  shell: sudo -u {{ edxapp_user }} SERVICE_VARIANT=lms {{ edxapp_venv_bin }}/django-admin.py migrate --noinput --settings=lms.envs.aws --pythonpath={{ edxapp_code_dir }}
  when: migrate_only is defined and migrate_only|lower == "yes"
  tags:
  - deploy

# Gather lms assets using rake if possible
- name: gather lms static assets with rake
  shell: SERVICE_VARIANT={{ edxapp_lms_variant }} rake lms:gather_assets:aws
    executable=/bin/bash
    chdir={{ edxapp_code_dir }}
  notify:
  - edxapp | restart edxapp
  sudo_user: "{{ edxapp_user }}"
  when: celery_worker is not defined
  environment: "{{ edxapp_deploy_environment }}"
  tags:
  - deploy

# Gather cms assets using rake if possible
- name: gather cms static assets with rake
  shell: executable=/bin/bash chdir={{ edxapp_code_dir }} SERVICE_VARIANT={{ edxapp_cms_variant }} rake cms:gather_assets:aws
  notify:
  - edxapp | restart edxapp
  sudo_user: "{{ edxapp_user }}"
  when: celery_worker is not defined
  environment: "{{ edxapp_deploy_environment }}"
  tags:
  - deploy


# https://code.launchpad.net/~wligtenberg/django-openid-auth/mysql_fix/+merge/22726
# This is necessary for when syncdb is run and the django_openid_auth module is installed,
# not sure if this fix will ever get merged
# We should never do this in production
- name: openid workaround - NOT FOR PRODUCTION
  shell: sed -i -e 's/claimed_id = models.TextField(max_length=2047, unique=True/claimed_id = models.TextField(max_length=2047/' {{ edxapp_venv_dir }}/lib/python2.7/site-packages/django_openid_auth/models.py
  when: openid_workaround is defined
  tags:
  - deploy

- name: restart edxapp
  service: name=edxapp state=restarted
  when: celery_worker is not defined
  tags:
  - deploy

- name: restart workers
  service: name=edx-workers state=restarted
  when: celery_worker is defined
  tags:
  - deploy
