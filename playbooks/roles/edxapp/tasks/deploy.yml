# Stop all services.
#
#

# TODO: the supervisor ansible module does not support
# stopping and starting services by group.

- name: edxapp | stop the edxapp services (supervisor)
  supervisorctl: >
    name="edxapp:{{ item }}"
    supervisorctl_path={{ supervisor_ctl }}
    config={{ supervisor_cfg }}
    state=stopped
  when: celery_worker is not defined
  with_items: service_variants_enabled
  tags:
    - deploy

- name: edxapp | stop the celery worker services (supervisor)
  supervisorctl: >
    name="edxapp_worker:{{ item.service_variant }}_{{ item.queue }}_{{ item.concurrency }}"
    supervisorctl_path={{ supervisor_ctl }}
    config={{ supervisor_cfg }}
    state=stopped
  when: celery_worker is defined
  with_items: edxapp_workers
  tags:
    - deploy

# Do A Checkout
- name: edxapp | checkout edx-platform repo into {{edxapp_code_dir}}
  git: dest={{edxapp_code_dir}} repo={{edx_platform_repo}} version={{edx_platform_commit}}
  register: edx_platform_checkout
  sudo_user: "{{ edxapp_user }}"
  tags:
  - deploy


- name: edxapp | git clean after checking out edx-platform
  shell: cd {{edxapp_code_dir}} && git clean -xdf
  when: edx_platform_checkout.changed
  sudo_user: "{{ edxapp_user }}"
  tags:
  - deploy


- name: edxapp | checkout theme
  git: dest={{ edxapp_app_dir }}/themes/{{edxapp_theme_name}} repo={{edxapp_theme_source_repo}} version={{edxapp_theme_version}}
  when: edxapp_theme_name != ''
  sudo_user: "{{ edxapp_user }}"
  tags:
  - deploy

# Ruby plays that need to be run after platform updates.
- name: edxapp | gem install bundler
  shell: >
    gem install bundle
      chdir={{ edxapp_code_dir }}
      executable=/bin/bash
  environment: "{{ edxapp_deploy_environment }}"
  sudo_user: "{{ edxapp_user }}"
  tags:
  - deploy

- name: edxapp | bundle install
  shell: >
    bundle install --binstubs
      chdir={{ edxapp_code_dir }}
      executable=/bin/bash
  sudo_user: "{{ edxapp_user }}"
  environment: "{{ edxapp_deploy_environment }}"
  tags:
  - deploy

# Node play that need to be run after platform updates.
- name: edxapp | Install edx-platform npm dependencies
  shell: npm install chdir={{ edxapp_code_dir }}
  sudo_user: "{{ edxapp_user }}"
  environment: "{{ edxapp_deploy_environment }}"
  tags:
  - deploy

# Python plays that need to be run after platform updates.

# Substitute github mirror in all requirements files
#
- name: edxapp | Updating requirement files for git mirror
  command: |
    /bin/sed -i -e 's/github\.com/{{ COMMON_GIT_MIRROR }}/g' {{ item }}
  with_items:
    - "{{ pre_requirements_file }}"
    - "{{ post_requirements_file }}"
    - "{{ repo_requirements_file }}"
    - "{{ github_requirements_file }}"
    - "{{ local_requirements_file }}"
    - "{{ sandbox_base_requirements }}"
    - "{{ sandbox_local_requirements }}"
    - "{{ sandbox_post_requirements }}"
  sudo_user: "{{ edxapp_user }}"
  tags:
    - deploy

# Install the python pre requirements into {{ edxapp_venv_dir }}
- name : edxapp | install python pre-requirements
  pip: >
    requirements="{{pre_requirements_file}}"
    virtualenv="{{edxapp_venv_dir}}"
    state=present
    extra_args="-i {{ COMMON_PYPI_MIRROR_URL }}"
  sudo_user: "{{ edxapp_user }}"
  tags:
  - deploy

# Install the python modules into {{ edxapp_venv_dir }}
- name : edxapp | install python base-requirements
  # Need to use shell rather than pip so that we can maintain the context of our current working directory; some
  # requirements are pathed relative to the edx-platform repo. Using the pip from inside the virtual environment implicitly
  # installs everything into that virtual environment.
  shell: cd {{ edxapp_code_dir }} && {{ edxapp_venv_dir }}/bin/pip install -i {{ COMMON_PYPI_MIRROR_URL }} --exists-action w --use-mirrors -r {{ base_requirements_file }}
  sudo_user: "{{ edxapp_user }}"
  tags:
  - deploy

# Install the python post requirements into {{ edxapp_venv_dir }}
- name : edxapp | install python post-requirements
  pip: >
    requirements="{{post_requirements_file}}"
    virtualenv="{{edxapp_venv_dir}}"
    state=present
    extra_args="-i {{ COMMON_PYPI_MIRROR_URL }}"
  sudo_user: "{{ edxapp_user }}"
  tags:
  - deploy

# Install the final python modules into {{ edxapp_venv_dir }}
- name : edxapp | install python post-post requirements
  # Need to use shell rather than pip so that we can maintain the context of our current working directory; some
  # requirements are pathed relative to the edx-platform repo. Using the pip from inside the virtual environment implicitly
  # installs everything into that virtual environment.
  shell: cd {{ edxapp_code_dir }} && {{ edxapp_venv_dir }}/bin/pip install -i {{ COMMON_PYPI_MIRROR_URL }} --exists-action w --use-mirrors -r {{ item }}
  with_items:
  - "{{ repo_requirements_file }}"
  - "{{ github_requirements_file }}"
  - "{{ local_requirements_file }}"
  sudo_user: "{{ edxapp_user }}"
  tags:
  - deploy


# Install the sandbox python modules into {{ edxapp_venv_dir }}
- name : edxapp | install sandbox requirements into regular venv
  # Need to use shell rather than pip so that we can maintain the context of our current working directory; some
  # requirements are pathed relative to the edx-platform repo. Using the pip from inside the virtual environment implicitly
  # installs everything into that virtual environment.
  shell: cd {{ edxapp_code_dir }} && {{ edxapp_venv_dir }}/bin/pip install -i {{ COMMON_PYPI_MIRROR_URL }} --exists-action w --use-mirrors -r {{ item }}
  with_items:
  - "{{ sandbox_base_requirements }}"
  - "{{ sandbox_local_requirements }}"
  - "{{ sandbox_post_requirements }}"
  when: install_sandbox_reqs_into_regular_venv
  sudo_user: "{{ edxapp_user }}"
  tags:
  - deploy

# https://code.launchpad.net/~wligtenberg/django-openid-auth/mysql_fix/+merge/22726
# This is necessary for when syncdb is run and the django_openid_auth module is installed,
# not sure if this fix will ever get merged
# We should never do this in production
- name: edxapp | openid workaround - NOT FOR PRODUCTION
  shell: sed -i -e 's/claimed_id = models.TextField(max_length=2047, unique=True/claimed_id = models.TextField(max_length=2047/' {{ edxapp_venv_dir }}/lib/python2.7/site-packages/django_openid_auth/models.py
  when: openid_workaround is defined
  tags:
  - deploy

# creates the supervisor jobs for the
# service variants configured, runs
# gather_assets and db migrations
- include: service_variant_config.yml

- name: edxapp | restart the edxapp services (supervisor)
  supervisorctl: >
    name="edxapp:{{ item }}"
    supervisorctl_path={{ supervisor_ctl }}
    config={{ supervisor_cfg }}
    state=restarted
  when: celery_worker is not defined
  with_items: service_variants_enabled
  ignore_errors: true
  tags:
    - deploy

- name: edxapp | restart the celery worker services (supervisor)
  supervisorctl: >
    name="edxapp_worker:{{ item.service_variant }}_{{ item.queue }}_{{ item.concurrency }}"
    supervisorctl_path={{ supervisor_ctl }}
    config={{ supervisor_cfg }}
    state=restarted
  when: celery_worker is defined
  with_items: edxapp_workers
  ignore_errors: true
  tags:
    - deploy
