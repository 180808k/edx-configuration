# requires:
#  - group_vars/all
#  - common/tasks/main.yml
#  - nginx/tasks/main.yml
---
- name: create lms application config
  template: src=env.json.j2 dest=$app_base_dir/lms.env.json
  sudo: True
  tags:
  - lms

- name: create lms auth file
  template: src=auth.json.j2 dest=$app_base_dir/lms.auth.json
  sudo: True
  tags:
  - lms

- include: ../../nginx/tasks/nginx_site.yml state=link site_name=lms
- include: ../../nginx/tasks/nginx_site.yml state=link site_name=lms-backend

# Install ssh keys for ubuntu account to be able to check out from mitx
# Temprory behavior, not needed after June 1. Perhaps still useful as a recipe.
- name: install read-only ssh key for mitx repo (private)
  copy: src={{ secure_file_dir }}/ssh_deploy_private dest=/home/ubuntu/.ssh/id_rsa force=yes owner=ubuntu group=ubuntu mode=600
  tags:
  - lms
  - cms
- name: install read-only ssh key for mitx repo (public)
  copy: src={{ secure_file_dir }}/ssh_deploy_public dest=/home/ubuntu/.ssh/id_rsa.pub force=yes owner=ubuntu group=ubuntu mode=644
  tags:
  - lms
  - cms
- name: install read-only ssh key for mitx repo (host github known)
  copy: src={{ secure_file_dir }}/ssh_deploy_known_hosts dest=/home/ubuntu/.ssh/known_hosts force=yes owner=ubuntu group=ubuntu mode=600
  tags:
  - lms
  - cms

# Check out mitx repo to $app_base_dir
- name: set permissions on $app_base_dir sgid for edx
  file: path=$app_base_dir owner=root group=edx mode=2775 state=directory
  file: path=$app_base_dir owner=ubuntu group=edx mode=2775 state=directory
  sudo: True
  tags:
  - lms
  - cms
- name: install git and its recommends
  apt: pkg=git state=present install_recommends=yes 
  sudo: True
  tags:
  - lms
  - cms
- name: git checkout mitx repo into $app_base_dir
  git: dest=$app_base_dir/mitx repo=$lms_source_repo
  tags:
  - lms
  - cms

## Install the debian package requirements system-wide
- name: store remote apt_repos list for ansible use
  command: cat {{app_base_dir}}/mitx/apt-repos.txt
  register: apt_repos_list
  tags:
  - lms
  - cms
- name: add apt_repos to the remote hosts
  apt_repository: repo="$item"
  with_items: "{{apt_repos_list.stdout.split()}}"
  register: apt_repos_list_repo_adds
  sudo: True
  tags:
  - lms
  - cms
- name: update apt cache
  apt: update_cache=yes
  sudo: True
  only_if: "{{apt_repos_list_repo_adds.changed}}"
  tags:
  - lms
  - cms
- name: store repmote apt_packages list for ansible use
  command: cat {{app_base_dir}}/mitx/apt-packages.txt
  register: apt_packages_list
  tags:
  - lms
  - cms
- name: install a bunch of system packages on which LMS and CMS rely
  apt: pkg={{item}} state=present
  with_items: 
  - build-essential
  - libxml++2.6-dev
  - maven2
  - libreadline6-dev
  - python-scipy
  - libfreetype6-dev
  - openjdk-7-jre
  - python-numpy
  - inoticoming
  - python-boto
  - perl
  - liblapack-dev
  - curl
  - reprepro
  - gcc
  - fabric
  - zip
  - libmysqlclient-dev
  - python-pip
  - vagrant
  - libreadline-dev
  - rsyslog
  - g++
  - libssl-dev
  - sqlite3
  - mongodb
  - dvipng
  - rubygems
  - libxml2-utils
  - ntp
  - rake
  - pylint
  - mosh
  - facter
  - openjdk-7-jdk
  - ghostscript
  - apparmor-utils
  - python-coverage-test-runner
  - gfortran
  - ipython
  - git
  - graphviz
  - super
  - libxml2-dev
  - mongodb-clients
  - aspell
  - libjpeg8-dev
  - gunicorn
  - yui-compressor
  - postfix
  - mysql-client
  - pep8
  - libxslt1-dev
  - libgraphviz-dev
  - python-django-nose
  - python-nose
  - graphviz-dev
  - zlib1g-dev
  - libpng12-dev
  - pkg-config
  - liblwp-protocol-https-perl
  - libcurl4-openssl-dev
  - libdigest-sha-perl
  - python-jenkins
  - puppet
  - puppet-common
  - puppetmaster
  - puppetmaster-common
  - puppet-lint
  - vim-puppet
  - python-nosexcover
  - libwww-perl
  - libswitch-perl
  - libcrypt-ssleay-perl
  - libnet-amazon-ec2-perl
  - github-cli
  tags:
  - lms
  - cms

# Install the python requirements into $venv_dir 
- name : install python pre-requirements
  pip: requirements="{{app_base_dir}}/mitx/pre-requirements.txt" virtualenv="{{venv_dir}}" state=present
  tags:
  - lms
  - cms

# Install the python modules into $venv_dir 
- name : install python pre-requirements
  #pip: requirements="{{app_base_dir}}/mitx/requirements.txt" virtualenv="{{venv_dir}}" 
  # Need to use shell rather than pip so that we can maintain the context of our current working directory; some 
  # requirements are pathed relative to the mitx repo. Using the pip from inside the virtual environment implicitly
  # installs everything into that virtual environment.
  shell: cd $app_base_dir/mitx && $venv_dir/bin/pip install --use-mirrors -r $app_base_dir/mitx/requirements.txt
  tags:
  - lms
  - cms
