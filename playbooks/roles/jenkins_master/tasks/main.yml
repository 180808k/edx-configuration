---

- name: jenkins_master | install jenkins specific system packages
  apt:
    pkg={{','.join(jenkins_debian_pkgs)}}
    state=present update_cache=yes
  tags:
  - jenkins

- name: jenkins_master | Create jenkins group
  group: name={{ jenkins_group }} state=present

- name: jenkins_master | Add the jenkins user to the group
  user: name={{ jenkins_user }} append=yes groups={{ jenkins_group }}

- name: jenkins_master | Install Jenkins apt key
  apt_key: url=http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key state=present

- name: jenkins_master | Add apt repository
  apt_repository: repo='deb http://pkg.jenkins-ci.org/debian binary/' state=present

- name: jenkins_master | Install jenkins package
  apt: pkg=jenkins state=present update_cache=yes

- name: jenkins_master | Stop Jenkins
  service: name=jenkins state=stopped

# Move /var/lib/jenkins to Jenkins home (on the EBS)
- name: jenkins_master | Move /var/lib/jenkins
  command: mv /var/lib/jenkins {{ jenkins_home }}
           creates={{ jenkins_home }}

- name: jenkins_master | Set owner for Jenkins home
  file: path={{ jenkins_home }} recurse=yes state=directory
        owner={{ jenkins_user }} group={{ jenkins_group }}

# Symlink /var/lib/jenkins to {{ data_dir }}/jenkins
# since Jenkins will expect its files to be in /var/lib/jenkins
- name: jenkins_master | Symlink /var/lib/jenkins
  file: src={{ jenkins_home }} dest=/var/lib/jenkins state=link
        owner={{ jenkins_user }} group={{ jenkins_group }}
  notify:
    - jenkins_master | restart Jenkins

- name: jenkins_master | Make plugins directory
  sudo_user: jenkins
  shell: mkdir -p {{ jenkins_home }}/plugins

# We first download the plugins to a temp directory and include
# the version in the file name.  That way, if we increment
# the version, the plugin will be updated in Jenkins
- name: jenkins_master | Download Jenkins plugins
  get_url: url=http://updates.jenkins-ci.org/download/plugins/${item.name}/${item.version}/${item.name}.hpi
           dest=/tmp/${item.name}_${item.version}
  with_items: "{{ jenkins_plugins }}"

- name: jenkins_master | Install Jenkins plugins
  command: cp /tmp/${item.name}_${item.version} {{ jenkins_home }}/plugins/${item.name}.hpi
  with_items: "{{ jenkins_plugins }}"

- name: jenkins_master | Set Jenkins plugin permissions
  file: path={{ jenkins_home }}/plugins/${item.name}.hpi
        owner={{ jenkins_user }} group={{ jenkins_group }} mode=700
  with_items: "{{ jenkins_plugins }}"
  notify:
    - jenkins_master | restart Jenkins

# We had to fork some plugins to workaround
# certain issues.  If these changes get merged
# upstream, we may be able to use the regular plugin install process.
# Until then, we compile and install the forks ourselves.
- name: jenkins_master | Checkout custom plugin repo
  git: repo=${item.repo_url} dest=/tmp/${item.repo_name} version=${item.version}
  with_items: "{{ jenkins_custom_plugins }}"

- name: jenkins_master | Compile custom plugins
  command: mvn -Dmaven.test.skip=true install chdir=/tmp/${item.repo_name}
  with_items: "{{ jenkins_custom_plugins }}"

- name: jenkins_master | Install custom plugins
  command: mv /tmp/${item.repo_name}/target/${item.package}
           {{ jenkins_home }}/plugins/${item.package}
  with_items: "{{ jenkins_custom_plugins }}"
  notify:
    - jenkins_master | restart Jenkins

- name: jenkins_master | Set custom plugin permissions
  file: path={{ jenkins_home }}/plugins/${item.package}
        owner={{ jenkins_user }} group={{ jenkins_group }} mode=700
  with_items: "{{ jenkins_custom_plugins }}"

- name: jenkins_master | Setup nginix vhost
  template:
    src=etc/nginx/sites-available/jenkins.j2
    dest=/etc/nginx/sites-available/jenkins

- name: jenkins_master | enable jenkins vhost
  file:
    src=/etc/nginx/sites-available/jenkins
    dest=/etc/nginx/sites-enabled/jenkins
    state=link
  notify: jenkins_master | start nginx
