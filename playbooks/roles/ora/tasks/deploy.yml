
- name: ora | See if supervisord config file `ora.conf` is installed
  shell: "[ -f {{ supervisor_cfg_dir }}/ora.conf ] && echo 'Found' || echo ''"
  register: ora_installed
  tags:
  - deploy

- name: ora | See if supervisord `ora_celery.conf` is installed
  shell: "[ -f {{ supervisor_cfg_dir }}/ora_celery.conf ] && echo 'Found' || echo ''"
  register: ora_celery_installed
  tags:
  - deploy

# Stop ora service.
- name: ora | stop ora service
  supervisorctl: >
    name=ora
    supervisorctl_path={{ supervisor_ctl }}
    config={{ supervisor_cfg }}
    state=stopped
  when: ora_installed.stdout == 'Found'
  notify: ora | restart ora
  tags:
  - deploy

- name: ora | stop ora_celery service
  supervisorctl: >
    name=ora_celery
    supervisorctl_path={{ supervisor_ctl }}
    config={{ supervisor_cfg }}
    state=stopped
  when: ora_celery_installed.stdout == 'Found'
  notify: ora | restart ora_celery
  tags:
  - deploy

- include: ease.yml

- name: ora | create ora application config
  template: src=ora.env.json.j2 dest={{ora_app_dir}}/ora.env.json
  sudo_user: "{{ ora_user }}"
  tags:
  - deploy

- name: ora | create ora auth file
  template: src=ora.auth.json.j2 dest={{ora_app_dir}}/ora.auth.json
  sudo_user: "{{ ora_user }}"
  tags:
  - deploy

- name: ora | create supervisor scripts - ora, ora_celery
  template: >
    src={{ item }}.conf.j2 dest={{ supervisor_cfg_dir }}/{{ item }}.conf
    owner={{ supervisor_user }} group={{ common_web_user }} mode=0644
  with_items: ['ora', 'ora_celery']
  tags:
  - deploy

- name: ora | reload supervisor to allow to start the new services
  shell: "{{ supervisor_ctl }} -c {{ supervisor_cfg }} reload"

# Do A Checkout
- name: ora | git checkout ora repo into {{ ora_app_dir }}
  git: dest={{ ora_code_dir }} repo={{ ora_source_repo }} version={{ ora_version }}
  sudo_user: "{{ ora_user }}"
  notify:
    - ora | restart ora
    - ora | restart ora_celery
  tags:
  - deploy

# TODO: Check git.py _run_if_changed() to see if the logic there to skip running certain
# portions of the deploy needs to be incorporated here.


# Install the python pre requirements into {{ ora_venv_dir }}
- name: ora | install python pre-requirements
  pip: requirements="{{ ora_pre_requirements_file }}" virtualenv="{{ ora_venv_dir }}" state=present
  sudo_user: "{{ ora_user }}"
  notify:
    - ora | restart ora
    - ora | restart ora_celery
  tags:
  - deploy

# Install the python post requirements into {{ ora_venv_dir }}
- name: ora | install python post-requirements
  pip: requirements="{{ ora_post_requirements_file }}" virtualenv="{{ ora_venv_dir }}" state=present
  sudo_user: "{{ ora_user }}"
  notify:
    - ora | restart ora
    - ora | restart ora_celery
  tags:
  - deploy

  #Needed if using redis to prevent memory issues
- name: ora | change memory commit settings -- needed for redis
  command: sysctl vm.overcommit_memory=1
  notify:
    - ora | restart ora
    - ora | restart ora_celery
  tags:
  - deploy

- name: ora | syncdb and migrate
  shell: SERVICE_VARIANT=ora {{ora_venv_dir}}/bin/django-admin.py syncdb --migrate --noinput --settings=edx_ora.aws --pythonpath={{ora_code_dir}}
  when: migrate_db is defined and migrate_db|lower == "yes"
  sudo_user: "{{ ora_user }}"
  notify:
    - ora | restart ora
    - ora | restart ora_celery
  tags:
  - deploy

- name: ora | create users
  shell: SERVICE_VARIANT=ora {{ora_venv_dir}}/bin/django-admin.py update_users --settings=edx_ora.aws --pythonpath={{ora_code_dir}}
  sudo_user: "{{ ora_user }}"
  notify:
    - ora | restart ora
    - ora | restart ora_celery
  tags:
  - deploy
