---

- name: certs | stop the certificates service
  supervisorctl: >
    name="certs"
    supervisorctl_path={{ supervisor_ctl }}
    config={{ supervisor_cfg }}
    state=stopped
  tags: deploy

- name: certs | create certificate application config
  template: >
    src=certs.env.json.j2
    dest={{ certs_app_dir }}/env.json
  sudo_user: "{{ certs_user }}"
  tags: deploy

- name: certs | create certificate auth file
  template: >
    src=certs.auth.json.j2
    dest={{ certs_app_dir }}/auth.json
  sudo_user: "{{ certs_user }}"
  tags: deploy

- name: certs | writing supervisor script for certificates
  template: >
    src=certs.conf.j2 dest={{ supervisor_cfg_dir }}/certs.conf
    owner={{ supervisor_user }} group={{ common_web_user }} mode=0644
  notify: supervisor | reload supervisor
  tags: deploy

- name: certs | create ssh script for git
  template: >
    src={{ certs_git_ssh|basename }}.j2 dest={{ certs_git_ssh }}
    owner={{ certs_user }} mode=750
  tags: deploy

- name: certs | install read-only ssh key for the certs repo
  copy: >
    src={{ CERTS_LOCAL_GIT_IDENTITY }} dest={{ certs_git_identity }}
    force=yes owner={{ certs_user }} mode=0600
  tags: deploy

- name: certs | checkout certificates repo into {{ certs_code_dir }}
  git: dest={{ certs_code_dir }} repo={{ certs_repo }} version={{ certs_version }}
  sudo_user: "{{ certs_user }}"
  environment:
    GIT_SSH: "{{ certs_git_ssh }}"
  tags: deploy

- name: certs | remove read-only ssh key for the certs repo
  file: path={{ certs_git_identity }} state=absent
  tags: deploy

- name : install python requirements
  pip: requirements="{{ certs_requirements_file }}" virtualenv="{{ certs_venv_dir }}" state=present
  sudo_user: "{{ certs_user }}"
  tags: deploy

- name: certs | restart the certificate service
  supervisorctl: >
    name=certs
    supervisorctl_path={{ supervisor_ctl }}
    config={{ supervisor_cfg }}
    state=restarted
  tags: deploy
