{
  "AWSTemplateFormatVersion":"2010-09-09",
  "Description":"Bring up the edX comments service in a VPC.",
  "Parameters":{
    "EnvironmentTag":{
      "Type":"String",
      "Description":"A tag value applied to the hosts in the VPC indicating which environment to use during the configuration phase, e.g., dev, stage, prod",
      "Default":"stage"
    },
    "KeyName":{
      "Type":"String",
      "Description":"Name of an existing EC2 KeyPair to enable SSH access to the web server",
      "Default":"deployment"
    },
    "InstanceType":{
      "Description":"WebServer EC2 instance type",
      "Type":"String",
      "Default":"m1.small",
      "AllowedValues":[
        "t1.micro",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc1.4xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription":"must be a valid EC2 instance type."
    },
    "SSHLocation":{
      "Description":"The IP address range that can be used to SSH to the EC2 instances",
      "Type":"String",
      "MinLength":"9",
      "MaxLength":"18",
      "Default":"0.0.0.0/0",
      "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription":"must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "WebServerPort":{
      "Description":"The TCP port for the Web Server",
      "Type":"Number",
      "Default":"80"
    },
    "BastionInstanceType":{
      "Description":"Bastion Host EC2 instance type",
      "Type":"String",
      "Default":"m1.small",
      "AllowedValues":[
        "t1.micro",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc1.4xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription":"must be a valid EC2 instance type."
    },
    "NATInstanceType":{
      "Description":"NET Device EC2 instance type",
      "Type":"String",
      "Default":"m1.small",
      "AllowedValues":[
        "t1.micro",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc1.4xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription":"must be a valid EC2 instance type."
    },
    "CommentServiceDesiredCapacity":{
      "Description":"The Auto-scaling group desired capacity for the edxapp hosts",
      "Type":"Number",
      "Default":"2"
    },
    "MongoDesiredCapacity":{
      "Description":"The Auto-scaling group desired capacity for the Mongo hosts",
      "Type":"Number",
      "Default":"2"
    },
    "ElasticSearchDesiredCapacity":{
      "Description":"The Auto-scaling group desired capacity for the ElasticSearch hosts",
      "Type":"Number",
      "Default":"2"
    }
  },
  "Mappings":{
    "AWSInstanceType2Arch":{
      "t1.micro":        { "Arch":"64" },
      "m1.small":        { "Arch":"64" },
      "m1.medium":       { "Arch":"64" },
      "m1.large":        { "Arch":"64" },
      "m1.xlarge":       { "Arch":"64" },
      "m2.xlarge":       { "Arch":"64" },
      "m2.2xlarge":      { "Arch":"64" },
      "m2.4xlarge":      { "Arch":"64" },
      "m3.xlarge":       { "Arch":"64" },
      "m3.2xlarge":      { "Arch":"64" },
      "c1.medium":       { "Arch":"64" },
      "c1.xlarge":       { "Arch":"64" }
    },
    "AWSRegionArch2AMI":{
      "us-east-1":       { "32":"ami-def89fb7", "64":"ami-d0f89fb9" },
      "us-west-1":       { "32":"ami-fc002cb9", "64":"ami-fe002cbb" },
      "us-west-2":       { "32":"ami-0ef96e3e", "64":"ami-70f96e40" },
      "eu-west-1":       { "32":"ami-c27b6fb6", "64":"ami-ce7b6fba" },
      "sa-east-1":       { "32":"ami-a1da00bc", "64":"ami-a3da00be" },
      "ap-southeast-1":  { "32":"ami-66084734", "64":"ami-64084736" },
      "ap-southeast-2":  { "32":"ami-06ea7a3c", "64":"ami-04ea7a3e" },
      "ap-northeast-1":  { "32":"ami-fc6ceefd", "64":"ami-fe6ceeff" }
    },
    "AWSNATAMI":{
      "us-east-1":       { "AMI":"ami-c6699baf" },
      "us-west-2":       { "AMI":"ami-52ff7262" },
      "us-west-1":       { "AMI":"ami-3bcc9e7e" },
      "eu-west-1":       { "AMI":"ami-0b5b6c7f" },
      "ap-southeast-1":  { "AMI":"ami-02eb9350" },
      "ap-southeast-2":  { "AMI":"ami-ab990e91" },
      "ap-northeast-1":  { "AMI":"ami-14d86d15" },
      "sa-east-1":       { "AMI":"ami-0439e619" }
    },
    "SubnetConfig":{
      "VPC":             { "CIDR":"10.0.0.0/16" },
      "Public01":        { "CIDR":"10.0.0.0/24" },
      "Public02":        { "CIDR":"10.0.1.0/24" },
      "EdxComments01":   { "CIDR":"10.0.10.0/24" },
      "EdxComments02":   { "CIDR":"10.0.11.0/24" },
      "ElasticSearch01": { "CIDR":"10.0.40.0/24" },
      "ElasticSearch02": { "CIDR":"10.0.41.0/24" },
      "Data01":          { "CIDR":"10.0.50.0/24" },
      "Data02":          { "CIDR":"10.0.51.0/24" },
    },
    "MapRegionsToAvailZones":{
      "us-east-1":       { "AZone2":"us-east-1a",      "AZone0":"us-east-1b",      "AZone1":"us-east-1c" },
      "us-west-1":       { "AZone0":"us-west-1a",      "AZone2":"us-west-1b",      "AZone1":"us-west-1c" },
      "us-west-2":       { "AZone0":"us-west-2a",      "AZone1":"us-west-2b",      "AZone2":"us-west-2c" },
      "eu-west-1":       { "AZone0":"eu-west-1a",      "AZone1":"eu-west-1b",      "AZone2":"eu-west-1c" },
      "sa-east-1":       { "AZone0":"sa-east-1a",      "AZone1":"sa-east-1b",      "AZone2":"sa-east-1c" },
      "ap-southeast-1":  { "AZone0":"ap-southeast-1a", "AZone1":"ap-southeast-1b", "AZone2":"ap-southeast-1c" },
      "ap-southeast-2":  { "AZone0":"ap-southeast-2a", "AZone1":"ap-southeast-2b", "AZone2":"ap-southeast-2c" },
      "ap-northeast-1":  { "AZone0":"ap-northeast-1a", "AZone1":"ap-northeast-1b", "AZone2":"ap-northeast-1c" }
    }
  },
  "Resources":{
    "EdxCommentsVPC":{
      "Type":"AWS::EC2::VPC",
      "Properties":{
        "CidrBlock":"10.0.0.0/16",
        "InstanceTenancy":"default"
      }
    },
    "PublicSubnet01":{
      "Type":"AWS::EC2::Subnet",
      "Properties":{
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "Public01",
            "CIDR"
          ]
        },
        "AvailabilityZone":{
          "Fn::FindInMap":[
            "MapRegionsToAvailZones",
            { "Ref":"AWS::Region" },
            "AZone0"
          ]
        }
      }
    },
    "PublicSubnet02":{
      "Type":"AWS::EC2::Subnet",
      "Properties":{
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "Public02",
            "CIDR"
          ]
        },
        "AvailabilityZone":{
          "Fn::FindInMap":[
            "MapRegionsToAvailZones",
            { "Ref":"AWS::Region" },
            "AZone1"
          ]
        }
      }
    },
    "CommentsServiceSubnet01":{
      "Type":"AWS::EC2::Subnet",
      "Properties":{
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "EdxComments01",
            "CIDR"
          ]
        },
        "AvailabilityZone":{
          "Fn::FindInMap":[
            "MapRegionsToAvailZones",
            { "Ref":"AWS::Region" },
            "AZone0"
          ]
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":"edXComments"
          },
          {
            "Key":"Network",
            "Value":"Private"
          }
        ]
      }
    },
    "CommentsServiceSubnet02":{
      "Type":"AWS::EC2::Subnet",
      "Properties":{
        "VpcId":{
          "Ref":"EdxVPC"
        },
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "EdxComments02",
            "CIDR"
          ]
        },
        "AvailabilityZone":{
          "Fn::FindInMap":[
            "MapRegionsToAvailZones",
            { "Ref":"AWS::Region" },
            "AZone1"
          ]
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":"edXComments"
          },
          {
            "Key":"Network",
            "Value":"Private"
          }
        ]
      }
    },
    "ElasticSearchSubnet01":{
      "Type":"AWS::EC2::Subnet",
      "Properties":{
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "ElasticSearch01",
            "CIDR"
          ]
        },
        "AvailabilityZone":{
          "Fn::FindInMap":[
            "MapRegionsToAvailZones",
            { "Ref":"AWS::Region" },
            "AZone0"
          ]
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":"elastic-search"
          },
          {
            "Key":"Network",
            "Value":"Private"
          }
        ]
      }
    },
    "ElasticSearchSubnet02":{
      "Type":"AWS::EC2::Subnet",
      "Properties":{
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "ElasticSearch02",
            "CIDR"
          ]
        },
        "AvailabilityZone":{
          "Fn::FindInMap":[
            "MapRegionsToAvailZones",
            { "Ref":"AWS::Region" },
            "AZone1"
          ]
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":"elastic-search"
          },
          {
            "Key":"Network",
            "Value":"Private"
          }
        ]
      }
    },
    "Data01":{
      "Type":"AWS::EC2::Subnet",
      "Properties":{
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "Data01",
            "CIDR"
          ]
        },
        "AvailabilityZone":{
          "Fn::FindInMap":[
            "MapRegionsToAvailZones",
            { "Ref":"AWS::Region" },
            "AZone0"
          ]
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":"MongoDB"
          },
          {
            "Key":"Network",
            "Value":"Data"
          }
        ]
      }
    },
    "Data02":{
      "Type":"AWS::EC2::Subnet",
      "Properties":{
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "Data02",
            "CIDR"
          ]
        },
        "AvailabilityZone":{
          "Fn::FindInMap":[
            "MapRegionsToAvailZones",
            { "Ref":"AWS::Region" },
            "AZone1"
          ]
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":"MongoDB"
          },
          {
            "Key":"Network",
            "Value":"Data"
          }
        ]
      }
    },
    "InternetGateway":{
      "Type":"AWS::EC2::InternetGateway",
      "Properties":{
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackId"
            }
          },
          {
            "Key":"Network",
            "Value":"Public"
          }
        ]
      }
    },
    "GatewayToInternet":{
      "Type":"AWS::EC2::VPCGatewayAttachment",
      "Properties":{
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "InternetGatewayId":{
          "Ref":"InternetGateway"
        }
      }
    },
    "PublicRouteTable":{
      "Type":"AWS::EC2::RouteTable",
      "Properties":{
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackId"
            }
          },
          {
            "Key":"Network",
            "Value":"Public"
          }
        ]
      }
    },
    "PublicRoute":{
      "Type":"AWS::EC2::Route",
      "Properties":{
        "RouteTableId":{
          "Ref":"PublicRouteTable"
        },
        "DestinationCidrBlock":"0.0.0.0/0",
        "GatewayId":{
          "Ref":"InternetGateway"
        }
      }
    },
    "PublicSubnetRouteTableAssociation01":{
      "Type":"AWS::EC2::SubnetRouteTableAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"PublicSubnet01"
        },
        "RouteTableId":{
          "Ref":"PublicRouteTable"
        }
      }
    },
    "PublicSubnetRouteTableAssociation02":{
      "Type":"AWS::EC2::SubnetRouteTableAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"PublicSubnet02"
        },
        "RouteTableId":{
          "Ref":"PublicRouteTable"
        }
      }
    },
    "PublicNetworkAcl":{
      "Type":"AWS::EC2::NetworkAcl",
      "Properties":{
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackId"
            }
          },
          {
            "Key":"Network",
            "Value":"Public"
          }
        ]
      }
    },
    "InboundHTTPPublicNetworkAclEntry":{
      "Type":"AWS::EC2::NetworkAclEntry",
      "Properties":{
        "NetworkAclId":{
          "Ref":"PublicNetworkAcl"
        },
        "RuleNumber":"100",
        "Protocol":"6",
        "RuleAction":"allow",
        "Egress":"false",
        "CidrBlock":"0.0.0.0/0",
        "PortRange":{
          "From":"80",
          "To":"80"
        }
      }
    },
    "InboundHTTPSPublicNetworkAclEntry":{
      "Type":"AWS::EC2::NetworkAclEntry",
      "Properties":{
        "NetworkAclId":{
          "Ref":"PublicNetworkAcl"
        },
        "RuleNumber":"101",
        "Protocol":"6",
        "RuleAction":"allow",
        "Egress":"false",
        "CidrBlock":"0.0.0.0/0",
        "PortRange":{
          "From":"443",
          "To":"443"
        }
      }
    },
    "InboundSSHPublicNetworkAclEntry":{
      "Type":"AWS::EC2::NetworkAclEntry",
      "Properties":{
        "NetworkAclId":{
          "Ref":"PublicNetworkAcl"
        },
        "RuleNumber":"102",
        "Protocol":"6",
        "RuleAction":"allow",
        "Egress":"false",
        "CidrBlock":{
          "Ref":"SSHLocation"
        },
        "PortRange":{
          "From":"22",
          "To":"22"
        }
      }
    },
    "InboundEmphemeralPublicNetworkAclEntry":{
      "Type":"AWS::EC2::NetworkAclEntry",
      "Properties":{
        "NetworkAclId":{
          "Ref":"PublicNetworkAcl"
        },
        "RuleNumber":"103",
        "Protocol":"6",
        "RuleAction":"allow",
        "Egress":"false",
        "CidrBlock":"0.0.0.0/0",
        "PortRange":{
          "From":"1024",
          "To":"65535"
        }
      }
    },
    "OutboundPublicNetworkAclEntry":{
      "Type":"AWS::EC2::NetworkAclEntry",
      "Properties":{
        "NetworkAclId":{
          "Ref":"PublicNetworkAcl"
        },
        "RuleNumber":"100",
        "Protocol":"6",
        "RuleAction":"allow",
        "Egress":"true",
        "CidrBlock":"0.0.0.0/0",
        "PortRange":{
          "From":"0",
          "To":"65535"
        }
      }
    },
    "PublicSubnetNetworkAclAssociation01":{
      "Type":"AWS::EC2::SubnetNetworkAclAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"PublicSubnet01"
        },
        "NetworkAclId":{
          "Ref":"PublicNetworkAcl"
        }
      }
    },
    "PublicSubnetNetworkAclAssociation02":{
      "Type":"AWS::EC2::SubnetNetworkAclAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"PublicSubnet02"
        },
        "NetworkAclId":{
          "Ref":"PublicNetworkAcl"
        }
      }
    },
    "PrivateRouteTable":{
      "Type":"AWS::EC2::RouteTable",
      "Properties":{
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackId"
            }
          },
          {
            "Key":"Network",
            "Value":"Private"
          }
        ]
      }
    },
    "PrivateRoute":{
      "Type":"AWS::EC2::Route",
      "Properties":{
        "RouteTableId":{
          "Ref":"PrivateRouteTable"
        },
        "DestinationCidrBlock":"0.0.0.0/0",
        "InstanceId":{
          "Ref":"NATDevice"
        }
      }
    },
    "PrivateSubnetRouteTableAssociationComments01":{
      "Type":"AWS::EC2::SubnetRouteTableAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"CommentsServiceSubnet01"
        },
        "RouteTableId":{
          "Ref":"PrivateRouteTable"
        }
      }
    },
    "PrivateSubnetRouteTableAssociationComments02":{
      "Type":"AWS::EC2::SubnetRouteTableAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"EdxCommentsSubnet02"
        },
        "RouteTableId":{
          "Ref":"PrivateRouteTable"
        }
      }
    },
    "PrivateSubnetRouteTableAssociationElasticSearch01":{
      "Type":"AWS::EC2::SubnetRouteTableAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"ElasticSearchSubnet01"
        },
        "RouteTableId":{
          "Ref":"PrivateRouteTable"
        }
      }
    },
    "PrivateSubnetRouteTableAssociationElasticSearch02":{
      "Type":"AWS::EC2::SubnetRouteTableAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"ElasticSearchSubnet02"
        },
        "RouteTableId":{
          "Ref":"PrivateRouteTable"
        }
      }
    },
    "PrivateSubnetRouteTableAssociationData01":{
      "Type":"AWS::EC2::SubnetRouteTableAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"Data01"
        },
        "RouteTableId":{
          "Ref":"PrivateRouteTable"
        }
      }
    },
    "PrivateSubnetRouteTableAssociationData02":{
      "Type":"AWS::EC2::SubnetRouteTableAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"Data02"
        },
        "RouteTableId":{
          "Ref":"PrivateRouteTable"
        }
      }
    },
    "PrivateNetworkAcl":{
      "Type":"AWS::EC2::NetworkAcl",
      "Properties":{
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackId"
            }
          },
          {
            "Key":"Network",
            "Value":"Private"
          }
        ]
      }
    },
    "InboundPrivateNetworkAclEntry":{
      "Type":"AWS::EC2::NetworkAclEntry",
      "Properties":{
        "NetworkAclId":{
          "Ref":"PrivateNetworkAcl"
        },
        "RuleNumber":"100",
        "Protocol":"6",
        "RuleAction":"allow",
        "Egress":"false",
        "CidrBlock":"0.0.0.0/0",
        "PortRange":{
          "From":"0",
          "To":"65535"
        }
      }
    },
    "OutBoundPrivateNetworkAclEntry":{
      "Type":"AWS::EC2::NetworkAclEntry",
      "Properties":{
        "NetworkAclId":{
          "Ref":"PrivateNetworkAcl"
        },
        "RuleNumber":"100",
        "Protocol":"6",
        "RuleAction":"allow",
        "Egress":"true",
        "CidrBlock":"0.0.0.0/0",
        "PortRange":{
          "From":"0",
          "To":"65535"
        }
      }
    },
    "PrivateSubnetNetworkAclAssociationComments01":{
      "Type":"AWS::EC2::SubnetNetworkAclAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"CommentsServiceSubnet01"
        },
        "NetworkAclId":{
          "Ref":"PrivateNetworkAcl"
        }
      }
    },
    "PrivateSubnetNetworkAclAssociationComments02":{
      "Type":"AWS::EC2::SubnetNetworkAclAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"CommentsServiceSubnet02"
        },
        "NetworkAclId":{
          "Ref":"PrivateNetworkAcl"
        }
      }
    },
    "PrivateSubnetNetworkAclAssociationElasticSearch01":{
      "Type":"AWS::EC2::SubnetNetworkAclAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"ElasticSearchSubnet01"
        },
        "NetworkAclId":{
          "Ref":"PrivateNetworkAcl"
        }
      }
    },
    "PrivateSubnetNetworkAclAssociationElasticSearch02":{
      "Type":"AWS::EC2::SubnetNetworkAclAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"ElasticSearchSubnet02"
        },
        "NetworkAclId":{
          "Ref":"PrivateNetworkAcl"
        }
      }
    },
    "PrivateSubnetNetworkAclAssociationData01":{
      "Type":"AWS::EC2::SubnetNetworkAclAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"Data01"
        },
        "NetworkAclId":{
          "Ref":"PrivateNetworkAcl"
        }
      }
    },
    "PrivateSubnetNetworkAclAssociationData02":{
      "Type":"AWS::EC2::SubnetNetworkAclAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"Data02"
        },
        "NetworkAclId":{
          "Ref":"PrivateNetworkAcl"
        }
      }
    },
    "NATIPAddress":{
      "Type":"AWS::EC2::EIP",
      "Properties":{
        "Domain":"vpc",
        "InstanceId":{
          "Ref":"NATDevice"
        }
      }
    },
    "NATDevice":{
      "Type":"AWS::EC2::Instance",
      "Properties":{
        "InstanceType":{
          "Ref":"NATInstanceType"
        },
        "KeyName":{
          "Ref":"KeyName"
        },
        "SubnetId":{
          "Ref":"PublicSubnet01"
        },
        "SourceDestCheck":"false",
        "ImageId":{
          "Fn::FindInMap":[
            "AWSNATAMI",
            {
              "Ref":"AWS::Region"
            },
            "AMI"
          ]
        },
        "SecurityGroupIds":[
          {
            "Ref":"NATSecurityGroup"
          }
        ]
      }
    },
    "NATSecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"Enable internal access to the NAT device",
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"80",
            "ToPort":"80",
            "CidrIp":"0.0.0.0/0"
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"443",
            "ToPort":"443",
            "CidrIp":"0.0.0.0/0"
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"22",
            "ToPort":"22",
            "CidrIp":{
              "Ref":"SSHLocation"
            }
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"9418",
            "ToPort":"9418",
            "CidrIp":"0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"80",
            "ToPort":"80",
            "CidrIp":"0.0.0.0/0"
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"443",
            "ToPort":"443",
            "CidrIp":"0.0.0.0/0"
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"22",
            "ToPort":"22",
            "CidrIp":{
              "Ref":"SSHLocation"
            }
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"9418",
            "ToPort":"9418",
            "CidrIp":"0.0.0.0/0"
          }
        ]
      }
    },
    "BastionIPAddress":{
      "Type":"AWS::EC2::EIP",
      "Properties":{
        "Domain":"vpc",
        "InstanceId":{
          "Ref":"BastionHost"
        }
      }
    },
    "BastionHost":{
      "Type":"AWS::EC2::Instance",
      "Properties":{
        "InstanceType":{
          "Ref":"BastionInstanceType"
        },
        "KeyName":{
          "Ref":"KeyName"
        },
        "SubnetId":{
          "Ref":"PublicSubnet01"
        },
        "ImageId":{
          "Fn::FindInMap":[
            "AWSRegionArch2AMI",
            {
              "Ref":"AWS::Region"
            },
            {
              "Fn::FindInMap":[
                "AWSInstanceType2Arch",
                {
                  "Ref":"BastionInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "SecurityGroupIds":[
          {
            "Ref":"BastionSecurityGroup"
          }
        ]
      }
    },
    "BastionSecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"Enable access to the Bastion host",
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"22",
            "ToPort":"22",
            "CidrIp":{
              "Ref":"SSHLocation"
            }
          }
        ],
        "SecurityGroupEgress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"22",
            "ToPort":"22",
            "CidrIp":{
              "Fn::FindInMap":[
                "SubnetConfig",
                "Edxapp01",
                "CIDR"
              ]
            }
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"22",
            "ToPort":"22",
            "CidrIp":{
              "Fn::FindInMap":[
                "SubnetConfig",
                "Edxapp02",
                "CIDR"
              ]
            }
          }
        ]
      }
    },
    "EdxServerUser":{
      "Type":"AWS::IAM::User",
      "Properties":{
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"root",
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "cloudformation:DescribeStackResource",
                    "s3:Put"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },
    "HostKeys":{
      "Type":"AWS::IAM::AccessKey",
      "Properties":{
        "UserName":{
          "Ref":"EdxServerUser"
        }
      }
    },
    "AdminSecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"Admin Security Group",
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"22",
            "ToPort":"22",
            "CidrIp":{
              "Ref":"SSHLocation"
            }
          }
        ]
      }
    },
    "EdxCommentsServer":{
      "Type":"AWS::AutoScaling::LaunchConfiguration",
      "Metadata":{
        "AWS::CloudFormation::Init":{
          "config":{
            "files":{
              "/home/ubuntu/.s3cfg":{
                "content":{
                  "Fn::Join":[
                    "",
                    [
                      "[default]\n",
                      "access_key = ",
                      {
                        "Ref":"HostKeys"
                      },
                      "\n",
                      "secret_key = ",
                      {
                        "Fn::GetAtt":[
                          "HostKeys",
                          "SecretAccessKey"
                        ]
                      },
                      "\n",
                      "use_https = True\n"
                    ]
                  ]
                },
                "mode":"000644",
                "owner":"ubuntu",
                "group":"ubuntu"
              }
            }
          }
        }
      },
      "Properties":{
        "SecurityGroups":[
          {
            "Ref":"EdxappServerSecurityGroup"
          }
        ],
        "ImageId":{
          "Fn::FindInMap":[
            "AWSRegionArch2AMI",
            {
              "Ref":"AWS::Region"
            },
            {
              "Fn::FindInMap":[
                "AWSInstanceType2Arch",
                {
                  "Ref":"InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "UserData":{
          "Fn::Base64":{
            "Fn::Join":[
              "",
              [
                "#!/bin/bash\n",
                "exec >> /home/ubuntu/cflog.log\n",
                "exec 2>> /home/ubuntu/cflog.log\n",
                "function error_exit\n",
                "{\n",
                "  cfn-signal -e 1 -r \"$1\" '",
                {
                  "Ref":"EdxServerWaitHandle"
                },
                "'\n",
                "  exit 1\n",
                "}\n",
                "apt-get -y update\n",
                "apt-get -y install python-setuptools\n",
                "echo \"Python Tools installed\" - `date` >> /home/ubuntu/cflog.txt\n",
                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "echo \"Cloudformation Boostrap installed \" - `date` >> /home/ubuntu/cflog.txt\n",
                "cfn-init --region ",
                {
                  "Ref":"AWS::Region"
                },
                "    -s ",
                {
                  "Ref":"AWS::StackName"
                },
                " -r EdxappServer ",
                "         --access-key ",
                {
                  "Ref":"HostKeys"
                },
                "         --secret-key ",
                {
                  "Fn::GetAtt":[
                    "HostKeys",
                    "SecretAccessKey"
                  ]
                },
                " || error_exit 'Failed to run cfn-init'\n",
                "echo \"cfn-init run \" - `date` >> /home/ubuntu/cflog.txt\n",
                "# If all went well, signal success\n",
                "cfn-signal -e $? -r 'Edx Server configuration' '",
                {
                  "Ref":"EdxServerWaitHandle"
                },
                "'\n"
              ]
            ]
          }
        },
        "KeyName":{
          "Ref":"KeyName"
        },
        "InstanceType":{
          "Ref":"InstanceType"
        },
        "BlockDeviceMappings":[
          {
            "DeviceName":"/dev/xvdb",
            "Ebs":{
              "VolumeSize":"50"
            }
          },
          {
            "DeviceName":"/dev/xvdc",
            "Ebs":{
              "VolumeSize":"50"
            }
          }
        ]
      }
    },
    "EdxCommentsServerASGroup":{
      "Type":"AWS::AutoScaling::AutoScalingGroup",
      "Properties":{
        "AvailabilityZones":[
          {
            "Fn::GetAtt":[
              "EdxCommentsSubnet01",
              "AvailabilityZone"
            ]
          },
          {
            "Fn::GetAtt":[
              "EdxCommentsSubnet02",
              "AvailabilityZone"
            ]
          }
        ],
        "VPCZoneIdentifier":[
          {
            "Ref":"EdxCommentsSubnet01"
          },
          {
            "Ref":"EdxCommentsSubnet02"
          }
        ],
        "Tags":[
          {
            "Key":"group",
            "Value":"edxcomments",
            "PropagateAtLaunch":true
          },
          {
            "Key":"environment",
            "Value":{
              "Ref":"EnvironmentTag"
            },
            "PropagateAtLaunch":true
          }
        ],
        "LaunchConfigurationName":{
          "Ref":"EdxCommentsServer"
        },
        "MinSize":"1",
        "MaxSize":"6",
        "DesiredCapacity":{
          "Ref":"EdxappDesiredCapacity"
        },
        "LoadBalancerNames":[
          {
            "Ref":"EdxappELB"
          }
        ]
      }
    },
    "EdxCommentsELB":{
      "Type":"AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties":{
        "SecurityGroups":[
          {
            "Ref":"EdxCommentsELBSecurityGroup"
          }
        ],
        "Listeners":[
          {
            "LoadBalancerPort":"80",
            "InstancePort":{
              "Ref":"WebServerPort"
            },
            "Protocol":"HTTP"
          }
        ],
        "HealthCheck":{
          "Target":"TCP:80",
          "HealthyThreshold":"3",
          "UnhealthyThreshold":"5",
          "Interval":"30",
          "Timeout":"5"
        },
        "Subnets":[
          {
            "Ref":"PublicSubnet01"
          },
          {
            "Ref":"PublicSubnet02"
          }    
        ]
      }
    },
    "EdxCommentsELBSecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"Enable HTTP access on port 80",
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"80",
            "ToPort":"80",
            "CidrIp":"0.0.0.0/0"
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"443",
            "ToPort":"443",
            "CidrIp":"0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"80",
            "ToPort":"80",
            "CidrIp":"0.0.0.0/0"
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"443",
            "ToPort":"443",
            "CidrIp":"0.0.0.0/0"
          }
        ]
      }
    },
    "EdxCommentsServerSecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"Open up SSH access plus Edx Server required ports",
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"22",
            "ToPort":"22",
            "CidrIp":{
              "Ref":"SSHLocation"
            }
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"80",
            "ToPort":"80",
						"SourceSecurityGroupId" : {
							"Ref" : "EdxCommentsELBSecurityGroup" 
						}
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"80",
            "ToPort":"80",
						"CidrIp" : "10.0.0.0/16"
          }
        ]
      }
    },
    "EdxServerWaitHandle":{
      "Type":"AWS::CloudFormation::WaitConditionHandle"
    },
    "EdxServerWaitCondition":{
      "Type":"AWS::CloudFormation::WaitCondition",
      "DependsOn":"EdxappServer",
      "Properties":{
        "Handle":{
          "Ref":"EdxServerWaitHandle"
        },
        "Timeout":"1200"
      }
    },
    "ElasticSearchServer":{
      "Type":"AWS::AutoScaling::LaunchConfiguration",
      "Metadata":{
        "AWS::CloudFormation::Init":{
          "config":{
            "files":{
              "/home/ubuntu/.s3cfg":{
                "content":{
                  "Fn::Join":[
                    "",
                    [
                      "[default]\n",
                      "access_key = ",
                      {
                        "Ref":"HostKeys"
                      },
                      "\n",
                      "secret_key = ",
                      {
                        "Fn::GetAtt":[
                          "HostKeys",
                          "SecretAccessKey"
                        ]
                      },
                      "\n",
                      "use_https = True\n"
                    ]
                  ]
                },
                "mode":"000644",
                "owner":"ubuntu",
                "group":"ubuntu"
              }
            }
          }
        }
      },
      "Properties":{
        "SecurityGroups":[
          {
            "Ref":"ElasticSearchServerSecurityGroup"
          }
        ],
        "ImageId":{
          "Fn::FindInMap":[
            "AWSRegionArch2AMI",
            {
              "Ref":"AWS::Region"
            },
            {
              "Fn::FindInMap":[
                "AWSInstanceType2Arch",
                {
                  "Ref":"InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "UserData":{
          "Fn::Base64":{
            "Fn::Join":[
              "",
              [
                "#!/bin/bash\n",
                "exec >> /home/ubuntu/cflog.log\n",
                "exec 2>> /home/ubuntu/cflog.log\n",
                "function error_exit\n",
                "{\n",
                "  cfn-signal -e 1 -r \"$1\" '",
                {
                  "Ref":"ElasticSearchServerWaitHandle"
                },
                "'\n",
                "  exit 1\n",
                "}\n",
                "apt-get -y update\n",
                "apt-get -y install python-setuptools\n",
                "echo \"Python Tools installed\" - `date` >> /home/ubuntu/cflog.txt\n",
                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "echo \"Cloudformation Boostrap installed \" - `date` >> /home/ubuntu/cflog.txt\n",
                "cfn-init --region ",
                {
                  "Ref":"AWS::Region"
                },
                "    -s ",
                {
                  "Ref":"AWS::StackName"
                },
                " -r EdxappServer ",
                "         --access-key ",
                {
                  "Ref":"HostKeys"
                },
                "         --secret-key ",
                {
                  "Fn::GetAtt":[
                    "HostKeys",
                    "SecretAccessKey"
                  ]
                },
                " || error_exit 'Failed to run cfn-init'\n",
                "echo \"cfn-init run \" - `date` >> /home/ubuntu/cflog.txt\n",
                "# If all went well, signal success\n",
                "cfn-signal -e $? -r 'Edx Server configuration' '",
                {
                  "Ref":"ElasticSearchServerWaitHandle"
                },
                "'\n"
              ]
            ]
          }
        },
        "KeyName":{
          "Ref":"KeyName"
        },
        "InstanceType":{
          "Ref":"InstanceType"
        }
      }
    },
    "ElasticSearchServerASGroup":{
      "Type":"AWS::AutoScaling::AutoScalingGroup",
      "Properties":{
        "AvailabilityZones":[
          {
            "Fn::GetAtt":[
              "ElasticSearchSubnet01",
              "AvailabilityZone"
            ]
          },
          {
            "Fn::GetAtt":[
              "ElasticSearchSubnet02",
              "AvailabilityZone"
            ]
          }
        ],
        "VPCZoneIdentifier":[
          {
            "Ref":"ElasticSearchSubnet01"
          },
          {
            "Ref":"ElasticSearchSubnet02"
          }
        ],
        "Tags":[
          {
            "Key":"group",
            "Value":"elasticsearch",
            "PropagateAtLaunch":true
          },
          {
            "Key":"environment",
            "Value":{
              "Ref":"EnvironmentTag"
            },
            "PropagateAtLaunch":true
          }
        ],
        "LaunchConfigurationName":{
          "Ref":"XqueueServer"
        },
        "MinSize":"2",
        "MaxSize":"2",
        "DesiredCapacity":{
          "Ref":"ElasticSearchDesiredCapacity"
        },
        "LoadBalancerNames":[
          {
            "Ref":"ElasticSearchELB"
          }
        ]
      }
    },

    "ElasticSearchELB":{
      "Type":"AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties":{
        "SecurityGroups":[
          {
            "Ref":"ElasticSearchELBSecurityGroup"
          }
        ],
        "Listeners":[
          {
            "LoadBalancerPort":"80",
            "InstancePort":"80",
            "Protocol":"HTTP"
          }
        ],
        "HealthCheck":{
          "Target":"TCP:80",
          "HealthyThreshold":"3",
          "UnhealthyThreshold":"5",
          "Interval":"30",
          "Timeout":"5"
        },
        "Subnets":[
          {
            "Ref":"PublicSubnet01"
          },
          {
            "Ref":"PublicSubnet02"
          }
        ]
      }
    },
    "ElasticSearchELBSecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"Enable HTTP access on port 80",
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"80",
            "ToPort":"80",
            "CidrIp":"0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"80",
            "ToPort":"80",
            "CidrIp":"0.0.0.0/0"
          }
        ]
      }
    },
    "ElasticSearchServerSecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"Open up SSH access plus Edx Server required ports",
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"22",
            "ToPort":"22",
            "CidrIp":{
              "Ref":"SSHLocation"
            }
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"80",
            "ToPort":"80",
            "SourceSecurityGroupId" : "ElasticSearchELBSecurityGroup"
          }
        ]
      }
    },
    "ElasticSearchServerWaitHandle":{
      "Type":"AWS::CloudFormation::WaitConditionHandle"
    },
    "ElasticSearchServerWaitCondition":{
      "Type":"AWS::CloudFormation::WaitCondition",
      "DependsOn":"ElasticSearchServer",
      "Properties":{
        "Handle":{
          "Ref":"ElasticSearchServerWaitHandle"
        },
        "Timeout":"1200"
      }
    },

    "MongoServer":{
      "Type":"AWS::AutoScaling::LaunchConfiguration",
      "Metadata":{
        "AWS::CloudFormation::Init":{
          "config":{
            "files":{
              "/home/ubuntu/.s3cfg":{
                "content":{
                  "Fn::Join":[
                    "",
                    [
                      "[default]\n",
                      "access_key = ",
                      {
                        "Ref":"HostKeys"
                      },
                      "\n",
                      "secret_key = ",
                      {
                        "Fn::GetAtt":[
                          "HostKeys",
                          "SecretAccessKey"
                        ]
                      },
                      "\n",
                      "use_https = True\n"
                    ]
                  ]
                },
                "mode":"000644",
                "owner":"ubuntu",
                "group":"ubuntu"
              }
            }
          }
        }
      },
      "Properties":{
        "SecurityGroups":[
          {
            "Ref":"MongoServerSecurityGroup"
          }
        ],
        "ImageId":{
          "Fn::FindInMap":[
            "AWSRegionArch2AMI",
            {
              "Ref":"AWS::Region"
            },
            {
              "Fn::FindInMap":[
                "AWSInstanceType2Arch",
                {
                  "Ref":"InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "UserData":{
          "Fn::Base64":{
            "Fn::Join":[
              "",
              [
                "#!/bin/bash\n",
                "exec >> /home/ubuntu/cflog.log\n",
                "exec 2>> /home/ubuntu/cflog.log\n",
                "function error_exit\n",
                "{\n",
                "  cfn-signal -e 1 -r \"$1\" '",
                {
                  "Ref":"MongoServerWaitHandle"
                },
                "'\n",
                "  exit 1\n",
                "}\n",
                "apt-get -y update\n",
                "apt-get -y install python-setuptools\n",
                "echo \"Python Tools installed\" - `date` >> /home/ubuntu/cflog.txt\n",
                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "echo \"Cloudformation Boostrap installed \" - `date` >> /home/ubuntu/cflog.txt\n",
                "cfn-init --region ",
                {
                  "Ref":"AWS::Region"
                },
                "    -s ",
                {
                  "Ref":"AWS::StackName"
                },
                " -r MongoServer ",
                "         --access-key ",
                {
                  "Ref":"HostKeys"
                },
                "         --secret-key ",
                {
                  "Fn::GetAtt":[
                    "HostKeys",
                    "SecretAccessKey"
                  ]
                },
                " || error_exit 'Failed to run cfn-init'\n",
                "echo \"cfn-init run \" - `date` >> /home/ubuntu/cflog.txt\n",
                "# If all went well, signal success\n",
                "cfn-signal -e $? -r 'Edx Server configuration' '",
                {
                  "Ref":"MongoServerWaitHandle"
                },
                "'\n"
              ]
            ]
          }
        },
        "KeyName":{
          "Ref":"KeyName"
        },
        "InstanceType":{
          "Ref":"InstanceType"
        },
        "BlockDeviceMappings":[
          {
            "DeviceName":"/dev/xvdb",
            "Ebs":{
              "VolumeSize":"50"
            }
          },
          {
            "DeviceName":"/dev/xvdc",
            "Ebs":{
              "VolumeSize":"50"
            }
          }
        ]
      }
    },
    "MongoServerASGroup":{
      "Type":"AWS::AutoScaling::AutoScalingGroup",
      "Properties":{
        "AvailabilityZones":[
          {
            "Fn::GetAtt":[
              "Data01",
              "AvailabilityZone"
            ]
          },
          {
            "Fn::GetAtt":[
              "Data02",
              "AvailabilityZone"
            ]
          }
        ],
        "VPCZoneIdentifier":[
          {
            "Ref":"Data01"
          },
          {
            "Ref":"Data02"
          }
        ],
        "Tags":[
          {
            "Key":"group",
            "Value":"mongodb",
            "PropagateAtLaunch":true
          },
          {
            "Key":"environment",
            "Value":{
              "Ref":"EnvironmentTag"
            },
            "PropagateAtLaunch":true
          }
        ],
        "LaunchConfigurationName":{
          "Ref":"MongoServer"
        },
        "MinSize":"2",
        "MaxSize":"2",
        "DesiredCapacity":{
          "Ref":"MongoDBDesiredCapacity"
        },
        "LoadBalancerNames":[
          {
            "Ref":"MongoServerELB"
          }
        ]
      }
    },
    "MongoServerWaitHandle":{
      "Type":"AWS::CloudFormation::WaitConditionHandle"
    },
    "MongoServerWaitCondition":{
      "Type":"AWS::CloudFormation::WaitCondition",
      "DependsOn":"MongoServer",
      "Properties":{
        "Handle":{
          "Ref":"MongoServerWaitHandle"
        },
        "Timeout":"1200"
      }
    },
    "EdxDataSecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"Open up access to the data subnet",
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"3306",
            "ToPort":"3306",
            "CidrIp":"0.0.0.0/0"
          }
        ]
      }
    },
    "EdxDBSubnetGroup":{
      "Type":"AWS::RDS::DBSubnetGroup",
      "Properties":{
        "DBSubnetGroupDescription":"Subnets available for the RDS DB Instance",
        "SubnetIds":[
          {
            "Ref":"Data01"
          },
          {
            "Ref":"Data02"
          }
        ]
      }
    },
    "DBSecurityGroup":{
      "Type":"AWS::RDS::DBSecurityGroup",
      "Properties":{
        "EC2VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "DBSecurityGroupIngress":[
          {
            "EC2SecurityGroupId":{
              "Ref":"EdxappServerSecurityGroup"
            }
          }
        ],
        "GroupDescription":"Data access"
      }
    },
    "EdxDB":{
      "Type":"AWS::RDS::DBInstance",
      "Properties":{
        "DBName":{
          "Ref":"DBName"
        },
        "AllocatedStorage":{
          "Ref":"DBAllocatedStorage"
        },
        "DBInstanceClass":{
          "Ref":"DBClass"
        },
        "Engine":"MySQL",
        "EngineVersion":"5.5",
        "MasterUsername":{
          "Ref":"DBUsername"
        },
        "MasterUserPassword":{
          "Ref":"DBPassword"
        },
        "DBSubnetGroupName":{
          "Ref":"EdxDBSubnetGroup"
        },
        "DBSecurityGroups":[
          {
            "Ref":"DBSecurityGroup"
          }
        ],
        "MultiAZ":"true"
      }
    },
    "CacheSecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"Access to the elastic cache cluster",
        "VpcId":{
          "Ref":"EdxCommentsVPC"
        },
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"12345",
            "ToPort":"12345",
            "SourceSecurityGroupId":{
              "Ref":"EdxappELBSecurityGroup"
            }
          }
        ]
      }
    }
  },
  "Outputs":{
    "EdxSecurityGroup":{
      "Description":"EC2 Security Group with access to the Edx server",
      "Value":{
        "Ref":"EdxappServerSecurityGroup"
      }
    },
    "DatabaseConfigurationString":{
      "Description":"JDBC connection string for database",
      "Value":{
        "Fn::Join":[
          "",
          [
            "'DATABASES': {\n",
            "    'default': {\n",
            "        'ENGINE': 'django.db.backends.mysql',\n",
            "        'NAME': '",
            {
              "Ref":"DBName"
            },
            "',\n",
            "        'USER': '",
            {
              "Ref":"DBUsername"
            },
            "',\n",
            "        'PASSWORD': '",
            {
              "Ref":"DBPassword"
            },
            "',\n",
            "        'HOST': '",
            {
              "Fn::GetAtt":[
                "EdxDB",
                "Endpoint.Address"
              ]
            },
            "',\n",
            "        'PORT': '",
            {
              "Fn::GetAtt":[
                "EdxDB",
                "Endpoint.Port"
              ]
            },
            "'\n",
            "    }\n",
            "}\n"
          ]
        ]
      }
    },
    "ElasticCacheCreateSubnetGroupCommand":{
      "Description":"MANUAL COMMAND #1: create subnet group. (these commands have to be run by hand because they aren't supported by CloudFormation yet.",
      "Value":{
        "Fn::Join":[
          "",
          [
            "elasticache-create-cache-subnet-group ", { "Ref":"EdxCommentsVPC" }, "-ElasticCacheSubnetGroup ",
            "--description 'VPC ElasticCache Subnet Group' ",
            "--subnet-ID-list ", { "Ref":"Cache01" }, ",", { "Ref":"Cache02" }
          ]
        ]
      }
    },
    "ElasticCacheCreateCacheClusterCommand":{
      "Description":"MANUAL COMMAND #2: Create cache cluster.",
      "Value":{
        "Fn::Join":[
          "",
          [
            "elasticache-create-cache-cluster ", { "Ref":"EdxCommentsVPC" }, "-Cache ",
            "--num-cache-nodes ", { "Ref":"NumberOfCacheNodes" }, " ",
            "--cache-node-type ", { "Ref":"CacheNodeType" }, " ",
            "--engine memcached ",
            "--engine-version 1.4.5 ",
            "--port 12345 ",
            "--preferred-availability-zone ",
            { "Fn::FindInMap":[
                "MapRegionsToAvailZones",
                { "Ref":"AWS::Region" },
                "AZone0"
              ]
            }, " ",
            "--cache-parameter-group-name default.memcached1.4 ",
            "--auto-minor-version-upgrade true ",
            "--cache-subnet-group-name ", { "Ref":"EdxCommentsVPC" },"-ElasticCacheSubnetGroup"
          ]
        ]
      }
    },
    "EnableDNSHostnamesForVPCCommand":{
      "Description":"MANUAL COMMAND #3: Change VPC setting to enable automatic DNS hostname resolution from within the VPC. Setting not supported in Cloudformation yet.",
      "Value":{
        "Fn::Join":[
          "",
          [
            "ec2-modify-vpc-attribute ",
            "-c ", { "Ref":"EdxCommentsVPC" }, " ",
            "-d true"
          ]
        ]
      }
    }
  }
}
